user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
}

http {	
	# Basic Settings
	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	include /etc/nginx/mime.types;
	default_type application/octet-strea;
	client_max_body_size 100M;

        log_format cachehit 'cache_file="$cache_file" args="$args" resource="$resource"';

	# Logs
	error_log /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log cachehit;

	# Gzip
	gzip on;

	server {
		listen 8080;
		server_name localhost;

		root /var/www/web;
		error_page 404 = /templates/notfound.php;
		
    		# Serve all typical static files directly
    		location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|bmp|webp|svg|ttf|woff|woff2|eot|otf|mp4|webm|ogg|mp3|wav)$ {
        		expires 30d;
        		add_header Cache-Control "public";
        		try_files $uri =404;
        		access_log off;
    		}

		#location ~ ^/api/(?<resource>[^/]+)/?$ {
		#location ~ ^/api/?([^/]*)/?$ {
		#location ~ ^/api/(.+)$ {
		#location ~ ^/api/([^/]+)/?$ {
		location ~ ^/api/(.+?)/?$ {
			set $resource $1;
			# Strip trailing slash if present
			
			set $clean_resource $resource;
			if ($resource ~ ^(.+[^/])/$) {
    				set $clean_resource $1;
			}
			set $cache_file "/storage/cache/${clean_resource}.html";

			# If cache file exists, set custom cache headers (for cache hit)
			add_header X-Cache-Hit "yes" always;
			add_header Cache-Control "max-age=3600" always;
			add_header X-Cache-Expire "3600" always;
			add_header X-Cache-File "$cache_file" always;

			# Add security header always
			add_header X-Content-Type-Options "nosniff" always;

			# Serve from cache if exists, else pass to PHP
			try_files $cache_file /index.php?$query_string;
		}

		location ~ \.php$ {
			fastcgi_pass unix:/run/php/php8.3-fpm.sock;
			fastcgi_index index.php;
			include fastcgi_params;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		}

		# Serve static files, if not found, return 404
		location / {
        		try_files $uri $uri/ =404;
    		}
	}
}
